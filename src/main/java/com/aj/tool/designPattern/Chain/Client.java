package com.aj.tool.designPattern.Chain;

/**
 * @ClassName: Client
 *
 * @Description: java设计模式-职责链模式
 * 模式导读：
 * 作为一名大学生，相信我们都有过请假的经历，在我们请假是总会碰到这样的场景，就是当请假的时间超过5天（包括5天），
 * 我们的请假条就不能由班主任进行审阅通过了，而是需要上交院系，由院领导进行审阅通过，当请假的时间超过一个月，
 * 就得由学校的教务处进行审阅通过。这便是在其位司其职，职责链模式也就相当于给了不同角色不同权限，权限低的不能去执行权限高的任务。
 * @date: 2020-04-09  0:53
 */
public class Client {
    /**
     * 责任链模式涉及到的角色如下所示：
     * 　　●　　抽象处理者(Handler)角色：定义出一个处理请求的接口。
     * 如果需要，接口可以定义 出一个方法以设定和返回对下家的引用。
     * 这个角色通常由一个Java抽象类或者Java接口实现。
     * 上图中Handler类的聚合关系给出了具体子类对下家的引用，
     * 抽象方法handleRequest()规范了子类处理请求的操作。
     * 　　●　　具体处理者(Department/Leader/HeadTeacher)角色：
     * 具体处理者接到请求后，可以选择将请求处理掉，或者将请求传给下家。
     * 由于具体处理者持有对下家的引用，因此，如果需要，具体处理者可以访问下家。
     *
     * @param args
     */

    public static void main(String[] args) {
        // 获取三个不同的处理者对象
        Handler h1 = new HeadTeacher();
        Handler h2 = new Department();
        Handler h3 = new Leader();
        // 设置角色的处理层次
//        h1.setNextHandler(h2);
        h2.setNextHandler(h3);
        h1.handlerRequest("李四", 5);
        System.out.println("*************************");
        h2.handlerRequest("王五", 15);
        System.out.println("*************************");
        h2.handlerRequest("朱七", 30);
    }
//    职责链模式的优缺点：
//    优点：
//            (1) 职责链模式使得一个对象无须知道是其他哪一个对象处理其请求，对象仅需知道该请求会被处理即可，接收者和发送者都没有对方的明确信息，且链中的对象不需要知道链的结构，由客户端负责链的创建，降低了系统的耦合度。
//            (2) 请求处理对象仅需维持一个指向其后继者的引用，而不需要维持它对所有的候选处理者的引用，可简化对象的相互连接。
//            (3) 在给对象分派职责时，职责链可以给我们更多的灵活性，可以通过在运行时对该链进行动态的增加或修改来增加或改变处理一个请求的职责。
//            (4) 在系统中增加一个新的具体请求处理者时无须修改原有系统的代码，只需要在客户端重新建链即可，从这一点来看是符合“开闭原则”的。
//    缺点：
//            (1) 由于一个请求没有明确的接收者，那么就不能保证它一定会被处理，该请求可能一直到链的末端都得不到处理；一个请求也可能因职责链没有被正确配置而得不到处理。
//            (2) 对于比较长的职责链，请求的处理可能涉及到多个处理对象，系统性能将受到一定影响，而且在进行代码调试时不太方便。
//            (3) 如果建链不当，可能会造成循环调用，将导致系统陷入死循环。
//    适用场景：
//            (1) 有多个对象可以处理同一个请求，具体哪个对象处理该请求待运行时刻再确定，客户端只需将请求提交到链上，而无须关心请求的处理对象是谁以及它是如何处理的。
//            (2) 在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。
//            (3) 可动态指定一组对象处理请求，客户端可以动态创建职责链来处理请求，还可以改变链中处理者之间的先后次序。
}
